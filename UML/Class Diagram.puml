@startuml
'Configuration'

skinparam style strictuml
skinparam genericDisplay old
skinparam linetype polyline
skinparam linetype ortho
hide empty members



'View package'
package "View Module"  {
class GameBoardView {
    -controller: GameBoardController
    -board: GameBoard
}

interface Viewable<<Interface>> {
    + display(): void
    + requestUpdate(): void
    + input(): void
}

class NightmareReferenceCardView {
    -controller: NightmareReferenceCardController
}

class CardView {
    - Controller: CardController
}
class ScoreBoardView {
    -controller: ScoreBoardController
}
class FirstSheepView {
    -controller: FirstSheepController
}

class GameView{
    + views: ArrayList<Viewable>
    - Scanner: scanner
    + displayRuleBook(String): void
}

class NightmareReferenceCardView implements Viewable
class GameView implements Viewable
class CardView implements Viewable
class GameBoardView implements Viewable
class ScoreBoardView implements Viewable
class NightmareReferenceCardView implements Viewable
class FirstSheepView implements Viewable
}


'Controller package'
package "Controller Module"  {
class GameBoardController {
  -gameBoardView: Viewable
  -board: GameBoard
  -gameController: IGameController
}

class ScoreBoardController {
    -scoreBoardView Viewable
    -board: ScoreBoard
    -gameController: IGameController
    -referenceTile: ReferenceTile
    + passReferenceTile(): ReferenceTile
}

class CardController {
    -cardView: Viewable
    -card: Card
    -gameController: IGameController
}

class NightmareReferenceCardController {
    -referenceCard: NightmareReferenceCard
    -nightmarReferenceCardView: Viewable
    -gameController: IGameController
    + passNightmareReferenceCard(): NightmareReferenceCard
}

class GameController implements IGameController{
    - gameView: Viewable
    - rulebook: Rulebook
    - phase: Phase[2]
    - deck: Deck[2]
    - controllers: ArrayList<Object>
    - generateControllers(): void
    - generateRestOfModel(): void
    + passRuleBook(): String

}
'IPlayer is created by First Sheep. Phase knows IFirstSheep (and is created by IFirstSheep), and Phase knows NightmareReferenceCard'
'Possibilities: Player shows "you are out", Phase shows current phase, Deck shows Deck, and Rulebook just shows the rule'

'TODO: passFirstSheep breaks MVC. Find an alternative path. The way this works is it passes the First Sheep during creation of this controller back to GameController'
'TODO: Figure out how NightmareReferenceCard will pass to GameController -- we can do it the same way as FirstSheep. We just need to pass it to Phase'
class FirstSheepController {
    - firstSheepView: Viewable
    - firstSheep: FirstSheep
    - gameController: IGameController
    + FirstSheepController(int, int): void
    + passFirstSheep(): FirstSheep
}

interface IGameController<<Interface>>{
    + initializeGame(): void
    + displayGameView(): void
    + displayRuleBook(): void
    + addViewToGameView(View): void
}

}



package "Model Module"{
GameBoard "1"-"1" GameBoardController

class GameBoard {
  -dreamTilesArray: DreamTile[11]
  -cardDeck: Deck
  -dreamTileDeck: Deck
  -SIZE: int
}


class ScoreBoard {
  -SIZE: int
}



abstract class Deck<T><<Abstract>> {
  - deck: ArrayList<T>
  - draw: DrawFromDeck
  + createDeck(): void
}

interface Drawable<T><<Interface>>{
    + draw(Deck): T
}

class DrawFromDeck<T> implements Drawable{
    - rand: Random
}

class CardDeck<T> {
  -numberOfPlayers: int
  +chooseCards(int): void
}

class DreamTileDeck<T> {
  +revealMarket(): void
  -marketArray: DreamTile[4]
}

class CardDeck extends Deck
class DreamTileDeck extends Deck

abstract class Card<T><<Abstract>>  {
  + description: String
}


class SheepCard {
  - minimumPlayersRequired: int
  - winks: int
  - movableDistance: int
  - canMoveAndCatch: boolean
  - canMoveAndGain: boolean
}

class NightmareCard {
  -jump: boolean
  -walk: boolean
  -scareAdjacent: boolean
  -moveToWebToken: boolean
}

class SheepCard extends Card
class NightmareCard extends Card
class NightmareReferenceCard extends Card


abstract class NightmareReferenceCard {
    -nightmareToken:NightmareToken
    + InitializeToken(): void

}


class NightmareWolf {

}
interface ISinisterSpider<<Interface>> {
    + createWebToken(): void
}
class SinisterSpider implements ISinisterSpider {
    - webToken: IWebToken
}

class BumpInTheNight {

}
class NightmareWolf extends NightmareReferenceCard
class SinisterSpider extends NightmareReferenceCard
class BumpInTheNight extends NightmareReferenceCard


interface IDreamTile<T><<Interface>> {
    +activateTile(IPlayer):void
}

class DreamTile implements IDreamTile{
    - description: String
    - initialZzzsRequired:int
    -tokens:ArrayList<ZzzToken>
}


abstract class Token<<Abstract>>  {
  - position: int
  + setPosition(int): void
  + getPosition(): int
}

interface IZzzToken<<Interface>> {
    +setPlayer(IPlayer):void
    +getPlayer(IPlayer):void
}

class ZzzToken implements IZzzToken {
  -infinite: boolean
  -player: IPlayer
}

interface ISheepToken <<Interface>> {
}

class SheepToken extends Token implements ISheepToken, Scareable, Stuckable {
    -scares: int
    -isStuck: boolean
    -isActive: boolean
    -player: IPlayer
    -fence: IFence
}

interface INightmareToken <<Interface>>{
}

class NightmareToken implements INightmareToken{
    -fence: IFence
}

interface IPillowToken <<Interface>> {
    + setPlayer(IPlayer): void
    + getPlayer(): IPlayer
}

class PillowToken implements IPillowToken{
    - player: IPlayer
}

interface IWinkToken <<Interface>> {
    +hasSurpassed():boolean
    +setPlayer(IPlayer):void
    +getPlayer():IPlayer
}

class WinkToken  implements IWinkToken{
    -pillowToken: IPillowToken
    -player: IPlayer
}

interface IWebToken <<Interface>> {
    +capture(Stuckable):void
}

class WebToken implements IWebToken{
}

class ZzzToken extends Token
class PillowToken extends Token
class NightmareToken extends Token
class WinkToken extends Token
class WebToken extends Token




interface Scarable <<Interface>> {
    +incrementScare(): void
    +decrementScare(): void
    +resetScare(): void
}

interface IScare <<Interface>>{
    +Scare(Scarable): void
}

class Scare implements IScare{
}

interface Stuckable <<Interface>>{
    +swapStuck(): void
}


interface IPlayer<<Interface>> {
    +initializeTokens():void
}

class Player implements IPlayer {
    - winks: int
    - isOut: boolean
    - nightmareReference: NightmareReferenceCard
    - zzzTokens: ArrayList<IZzzToken>
    - sheepToken: ISheepToken
    - winkToken: IWinkToken
    - pillowToken: IPillowToken
}


interface IActionable <<Interface>> {
    +actionOnToken(T, Token):void
}
class Actionable  implements IActionable{

}



interface IHand<<Interface>> {
    +addCard(Card):void
    +getNumCards():int
    +resolveCard():String, T
}

class Hand implements IHand {
    -cardDeck: CardDeck
    -cards: ICard[2]
}



interface IFirstSheep<<Interface>> {
  + incrementTurn(): void
  + getCurrentTurn(): IPlayer
  + getTurnSequence(): ArrayList<IPlayer>
  + declareFirstSheep(): void
}


class FirstSheep implements IFirstSheep {
    -currentFirstSheep: IPlayer
    -player:ArrayList<IPlayer>
    + FirstSheep(int, int): void
}
'NOTE: Number of players is passed to FirstSheep(int, int) with second int being the number of hours slept last night'



abstract class Phase<<Abstract>> {
  - players: ArrayList<Player>
  - deck: Deck
  - gameController: GameController
  - nightmareReferenceCard: NightmareReferenceCard
  - firstSheep: FirstSheep
  - Switchable: switchable
  + takeAction(IPlayer): void
  - isPhaseOver(): boolean
  - switch(Switchable): void
}
'Everytime right after takeAction is performed, call firstSheep's incrementTurn. SIDE CASE to figure out: Double Dutch'
'In order to figure out isOut, we can have a iteration that occurs every time takeAction(IPlayer) is executed (as a block of code after that) which adds the values of the player's IsOut, if they are equal to the size of the array of Players, then every player is out.'

interface Switchable<<Interface>> {
    switch(): void
}

class SwitchPhase implements Switchable{

}

class RacingPhase extends Phase{
    -fence: IFence
    -refereneTile: IReferenceTile
    -resetable: Resetable
    + enforceFullHand(IPlayer):void
    + reset(): void
}

class RestingPhase extends Phase {
    +initializeMarket():void
    +updateMarket():void
    +placeTileOrCatch(IPlayer):void
}




interface IResetable<<Interface>> {
    +reset(IPlayer, NightmareReferenceCard, cardDeck): void
}

class Resetable implements IResetable {

}


class Main{
    + main(): void
}





class Rulebook {
    + getRules(): String
    + setRules(String): void
}





interface IFence<<Interface>> {
    + passedThrough(Token):void
    - sheepPassed(Token):void
    - nightmarePassed(Token):void
}

class Fence implements IFence {
    -phase: Phase
    -numberOfPlayers: int
}


interface IReferenceTile<<Interface>> {
    + movePillow(Player): void
    - calculateDistanceToPillow(Token, Token): void
}

class ReferenceTile implements IReferenceTile {
    -players:ArrayList<IPlayer>
}



"View Module" -[hidden]- "Controller Module"
GameBoardView "1"-"1" GameBoardController

ScoreBoard "1"-"1" ScoreBoardController
ScoreBoardView "1"-"1" ScoreBoardController


CardView "1"-"1" CardController

CardController "1"-"0..* " Card


SheepCard "1"-"1" CardController
NightmareCard "1"-"1" CardController

NightmareReferenceCard "1" - "1" NightmareReferenceCardController
NightmareReferenceCardView "1" - "1" NightmareReferenceCardController


NightmareReferenceCard --|> INightmareToken


Player --|> IActionable: use
NightmareReferenceCard --|> IActionable:use

Hand --|> Card


FirstSheep "1" - "1" FirstSheepController
FirstSheepView "1" - "1" FirstSheepController

Phase "1.."<|--|>"1.." IFirstSheep
RacingPhase <|--|> IFence
RacingPhase "1"--|>"1" IReferenceTile
RacingPhase --|> IResetable

Main -> IGameController: use
GameView "1..* " --> "5..* " Viewable
GameView "1"-"1" IGameController
Rulebook "1" - "1" IGameController
Phase "2"-"1" IGameController
Deck "2"-"1" IGameController

Phase --|> IPlayer: use

IPlayer "1..4"<|-- FirstSheep
IFirstSheep "1"-"1" FirstSheepController
NightmareReferenceCardController "1"-"1" GameBoardController
NightmareReferenceCardController "1"-"1" IWebToken
Player --|> NightmareReferenceCard: use
GameBoardController "1"--|>"1..4" IPlayer
ScoreBoardController "1"--|>"1..4" IPlayer
IWinkToken "1"<|--|>"1" IPlayer
FirstSheep --|>"1..4" IPlayer
ISheepToken "1"<|--|>"1" IPlayer
IPillowToken "1"<|--|>"1" IPlayer
IZzzToken "10" <|--|> "1"IPlayer
ReferenceTile --|>"1..4" IPlayer
NightmareToken --|> IFence
WinkToken --|> IPillowToken
IDreamTile "1"--|>"0..40" IZzzToken
DreamTileDeck "1"--|>"0..* " IDreamTile
Phase --|> IResetable


Phase --|> NightmareReferenceCard
SinisterSpider --|> IWebToken
Phase --|> Deck
GameBoard --|> Deck

CardDeck "1"--|>"0..* " Card


Player --|> GameBoard
GameBoard --|> IDreamTile
IWebToken --|> Stuckable:use
SheepToken --|> IFence

NightmareToken --|>"1" IScare
DreamTile --|>"1" IScare

Player --|> IHand: use

Deck --|> DrawFromDeck


Phase --|> Switchable
IGameController "1"<|--|>"1" GameBoardController
IGameController "1"<|--|>"1" ScoreBoardController
IGameController "1"<|--|>"1" FirstSheepController
IGameController "1"<|--|>"1" NightmareReferenceCardController
IGameController "1"<|--|>"1" CardController






}



@enduml
