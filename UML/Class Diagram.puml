@startuml
skinparam style strictuml
skinparam genericDisplay old

class GameBoardController {
  -view: BoardView
  -board: Board
}

class GameBoard {
  -dreamTilesArray: DreamTile[11]
  -cardDeck: Deck
  -dreamTileDeck: Deck
  -SIZE: int
}

class GameBoardView {
    -controller: GameBoardController
    -board: GameBoard
}
GameBoard "1"-"1" GameBoardController
GameBoardView "1"-"1" GameBoardController


class ScoreBoardView {
    -controller: ScoreBoardController
}

class ScoreBoardController {
    -view ScoreBoardView
    -board: ScoreBoard
}

class ScoreBoard {
  -SIZE: int
}

ScoreBoard "1"-"1" ScoreBoardController
ScoreBoardView "1"-"1" ScoreBoardController

abstract class Deck {
  - deck: Stack
  + createDeck(): void
}

class CardDeck {
  -numberOfPlayers: int
  +chooseCards(int): void
}

class DreamTileDeck {
  +revealMarket(): void
  -marketArray: DreamTile[4]
}

class CardDeck implements Deck
class DreamTileDeck implements Deck

abstract class Card  {
  + description: String
}
class CardView {
    - Controller: CardController
}
class CardController {
    -view: CardView
    -card: Card

CardView "1"-"1" CardController
CardController "1"-"1" Card

}
class SheepCard {
  - minimumPlayersRequired: int
  - winks: int
  - movableDistance: int
  - canMoveAndCatch: boolean
  - canMoveAndGain: boolean
}

class NightmareCard {
  -jump: boolean
  -walk: boolean
  -scareAdjacent: boolean
  -moveToWebToken: boolean
}

class SheepCard extends Card
class NightmareCard extends Card
class NightmareReferenceCard extends Card
SheepCard "1"-"1" CardController
NightmareCard "1"-"1" CardController

abstract class NightmareReferenceCard {
    -nightmareToken:NightmareToken
    + InitializeToken(): void
}
class NightmareReferenceCardView {
    -controller: NightmareReferenceCardController
}
class NightmareReferenceCardView implements View

class NightmareReferenceCardController {
    -referenceCard: NightmareReferenceCard
    -view: NightmarReferenceCardView
}
class NightmareWolf {

}
interface ISinisterSpider {
    + createWebToken(): void
}
class SinisterSpider {
    - webToken: IWebToken
}
class SinisterSpider implements ISinisterSpider

class BumpInTheNight {

}
class NightmareWolf extends NightmareReferenceCard
class SinisterSpider extends NightmareReferenceCard
class BumpInTheNight extends NightmareReferenceCard


NightmareReferenceCard "1" - "1" NightmareReferenceCardController
NightmareReferenceCardView "1" - "1" NightmareReferenceCardController

interface IDreamTile<T><<Interface>> {
    +activateTile(IPlayer):void
}

class DreamTile {
    - description: String
    - initialZzzsRequired:int
    -tokens:ArrayList<ZzzToken>
}

class DreamTile implements IDreamTile

abstract class Token  {
  - position: int
  + setPosition(int): void
  + getPosition(): int
}

interface IZzzToken {
    +setPlayer(IPlayer):void
    +getPlayer(IPlayer):void
}

class ZzzToken {
  -infinite: boolean
  -player: IPlayer
}

class ZzzToken implements IZzzToken

interface ISheepToken {
}

class SheepToken {
    -scares: int
    -isStuck: boolean
    -isActive: boolean
    -player: IPlayer
    -fence: IFence
}

class SheepToken implements ISheepToken

interface INightmareToken {
}

class NightmareToken {
    -fence: IFence
}

class NightmareToken implements INightmareToken

interface IWinkToken {
    +hasSurpassed():boolean
    +setPlayer(IPlayer):void
    +getPlayer():IPlayer
}

class WinkToken {
    -pillowToken: IPillowToken
    -player: IPlayer
}

class WinkToken implements IWinkToken

interface IWebToken {
    +capture(Stuckable):void
}

class WebToken {
}

class ZzzToken extends Token
class PillowToken extends Token
class SheepToken extends Token
class NightmareToken extends Token
class WinkToken extends Token
class WebToken extends Token

NightmareReferenceCard --|> INightmareToken



interface Scarable {
    +incrementScare(): void
    +decrementScare(): void
    +resetScare(): void
}

interface IScare {
    +Scare(Scarable): void
}

interface Stuckable {
    +swapStuck(): void
}

class SheepToken implements Scarable
class SheepToken implements Stuckable
class NightmareToken implements IScare
class IDreamTile implements IScare

interface IPlayer {
    +initializeTokens():void
}

class Player {
    - winks: int
    - isOut: boolean
    - nightmareReference: NightmareReferenceCard
    - zzzTokens: ArrayList<IZzzToken>
    - sheepToken: ISheepToken
    - winkToken: IWinkToken
    - pillowToken: IPillowToken
}

class Player implements IPlayer

interface IActionable {
    +actionOnToken(T, Token):void
}
class Actionable {

}

class Actionable implements IActionable
Player --|> IActionable: use
NightmareReferenceCard --|> IActionable: use

interface IHand {
    +addCard(Card):void
    +getNumCards():int
    +resolveCard():String, T
}

class Hand {
    -cardDeck: CardDeck
    -cards: ICard[2]
}

class Hand implements IHand
IHand --|> CardController
Player --|> IHand

interface IFirstSheep {
  + getCurrentTurn(): IPlayer
  + getTurnSequence(): ArrayList<IPlayer>
  + declareFirstSheep(): void
}

class FirstSheepView {
    -controller: FirstSheepController
}

class FirstSheepController {
    -view: FirstSheepView
    -firstSheep: FirstSheep
}

class FirstSheep {
    -currentFirstSheep: IPlayer
    -player:ArrayList<IPlayer>
}

FirstSheep "1" - "1" FirstSheepController
FirstSheepView "1" - "1" FirstSheepController

abstract class Phase<<Abstract>> {
  - isPhaseOver(): boolean
  - players: ArrayList<Player>
  - deck: Deck
  - gameController: GameController
  - nightmareReferenceCard: NightmareReferenceCard
  + takeAction(IPlayer): void
}

class RacingPhase {
    -fence: IFence
    -refereneTile: IReferenceTile
    -resetable: Resetable
    +enforceFullHand(IPlayer):void
}

class RestingPhase {
    -firstSheep: FirstSheep
    +initializeMarket():void
    +updateMarket():void
    +placeTileOrCatch(IPlayer):void
}

class RacingPhase extends Phase
class RestingPhase extends Phase

RestingPhase --|> IFirstSheep
RacingPhase <|--|> IFence
RacingPhase "1"--|>"1" IReferenceTile
RacingPhase --|> IResetable

interface IResetable {
    +reset(IPlayer, NightmareReferenceCard, cardDeck): void
}

class Resetable {

}

class Reset implements IResetable

class Main{
    -gameController: IGameController
    main(): void
}
class GameController{
    - firstSheep: IFirstSheep
    - Scanner: scanner
    - gameView: GameView
}

interface IGameController{
    + initializeGame(): void
    + updateGameView(): void
}
class GameController implements IGameController

class GameView{
    + views: ArrayList<view>
}

Main -> IGameController

class Rulebook {
    + getRules(): String
    + setRules(String): void
}

interface View {
    + display(): void
    + requestUpdate(): void
    + input(): void
}
class GameView implements View
class CardView implements View
class GameBoardView implements View
class ScoreBoardView implements View
class NightmareReferenceCardView implements View
class FirstSheepView implements View


GameView "1..*" --> "6..*" View

interface IFence {
    + passedThrough(Token):void
    - sheepPassed(Token):void
    - nightmarePassed(Token):void
}

class Fence {
    -phase: Phase
    -numberOfPlayers: int
}

class Fence implements IFence

interface IReferenceTile {
    + movePillow(Player): void
    - calculateDistanceToPillow(Token, Token): void
}

class ReferenceTile {
    -players:ArrayList<IPlayer>
}

class ReferenceTile implements IReferenceTile

GameView "1"-"1" GameController
Rulebook "1" - "1" IGameController
Phase "1..2"-"1" IGameController
IPlayer "1..4"-"1" IGameController
IFirstSheep "1"-"1" IGameController
Deck "1"-"1" IGameController
NightmareReferenceCardController "1"-"1" GameBoardController
NightmareReferenceCardController "1"-"1" IWebToken

Phase --|> IPlayer: use
Deck <|-- IPlayer : use
IPlayer --|> NightmareReferenceCard: use
GameBoardController "1"--|>"1..4" IPlayer
ScoreBoardController "1"--|>"1..4" IPlayer
IWinkToken --|> IPlayer
IFirstSheep "1"--|>"1..4" IPlayer
ISheepToken "1"<|--|>"1" IPlayer
IPillowToken "1"<|--|>"1" IPlayer
ZzzToken "10" <|--|> "1"IPlayer
ReferenceTile --|> IPlayer

INightmareToken --|> IFence :use
WinkToken --|> IPillowToken
DreamTile "1"--|>"0..40" IZzzToken

DreamTileDeck "1"--|>"0..*" IDreamTile
CardDeck "1"--|>"0..*" ICard

Phase --|> IResetable:use




@enduml
